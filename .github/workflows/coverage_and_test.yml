# Define a workflow to generate coverage report, build, and deploy
name: Coverage, Build, and Deploy (Android)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Install Dependencies
  FrontEnd_install_dependencies: #Frontend 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'

      - name: Get Flutter dependencies
        run: |
          cd proximity_client
          flutter pub get

      - name: Install lcov
        run: sudo apt-get install -y lcov

  # Job 2: Run Tests and Generate Coverage
  run_tests:
    runs-on: ubuntu-latest
    needs: FrontEnd_install_dependencies
    steps:
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run tests and generate coverage report
        run: |
          cd proximity_client
          flutter test --coverage
          if [ ! -f coverage/lcov.info ]; then
            echo "Coverage report not found!"
            exit 1
          fi

  # Job 3: Clean Coverage Report
  clean_coverage:
    runs-on: ubuntu-latest
    needs: run_tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'

      - name: Install lcov
        run: sudo apt-get install -y lcov
      - name: Clean coverage report
        run: |
          cd proximity_client
          lcov --remove coverage/lcov.info '*/test/*' -o coverage/lcov.cleaned.info

      - name: List cleaned coverage report
        run: |
          cd proximity_client
          ls -l coverage

  # Job 4: Upload notre rapport de couverture vers le site codecov
  upload_coverage:
    runs-on: ubuntu-latest
    needs: clean_coverage

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'

      - name: Upload coverage report to codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: proximity_client/coverage/lcov.info
    

  # Job 5: Build Android APK
  build_android:
    name: Build Flutter (Android)
    needs: [run_tests, clean_coverage, upload_coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'
      - run: flutter pub get
      - run: flutter clean
      - run: |
          cd proximity_client
          flutter build apk
      - name: Debug - List Build Directory
        run: |
          echo "Listing build directory content..."
          ls -la proximity_client/build/app/outputs/flutter-apk/

  # Job 6: Deploy Android APK
  deploy_android:
    name: Deploy Android APK
    needs: build_android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Debug - List APK Directory Before Upload
        run: |
          echo "Listing APK directory content before upload..."
          ls -la proximity_client/build/app/outputs/flutter-apk/
      - name: Upload APK artifact
        uses: actions/upload-artifact@v2
        with:
          name: app-release
          path: proximity_client/build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: warn
          compression-level: 6
          overwrite: false

  # Job 7: Deploy to Firebase
  deploy_to_firebase:
    name: Deploy to Firebase
    needs: [deploy_android]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
      
      - name: Deploy to Firebase Hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: |
          cd proximity_client  
          firebase deploy --only hosting
