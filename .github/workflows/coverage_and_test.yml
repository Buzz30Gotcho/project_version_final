# Define a workflow to generate coverage report, build, and deploy
name: Coverage, Build, and Deploy (Android)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Install Dependencies
  FrontEnd_install_dependencies: #Frontend 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'

      - name: Get Flutter dependencies
        run: |
          cd proximity_client
          flutter pub get

      - name: Install lcov
        run: sudo apt-get install -y lcov

  # Job 2: Run Tests and Generate Coverage
  run_tests:
    runs-on: ubuntu-latest
    needs: FrontEnd_install_dependencies
    steps:
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run tests and generate coverage report
        run: |
          cd proximity_client
          flutter test --coverage
          if [ ! -f coverage/lcov.info ]; then
            echo "Coverage report not found!"
            exit 1
          fi

  # Job 3: Clean Coverage Report
  clean_coverage:
    runs-on: ubuntu-latest
    needs: run_tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'

      - name: Install lcov
        run: sudo apt-get install -y lcov
      - name: Clean coverage report
        run: |
          cd proximity_client
          lcov --remove coverage/lcov.info '*/test/*' -o coverage/lcov.cleaned.info

      - name: List cleaned coverage report
        run: |
          cd proximity_client
          ls -l coverage

  # Job 4: Upload notre rapport de couverture vers le site codecov
  upload_coverage:
    runs-on: ubuntu-latest
    needs: clean_coverage

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'

      - name: Upload coverage report to codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: proximity_client/coverage/lcov.info
    

  # Job 5: Build Android APK
  build_android:
    name: Build Flutter (Android)
    needs: [run_tests, clean_coverage, upload_coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.5'
      - run: flutter pub get
      - run: flutter clean
      - run: cd proximity_client/lib &&
          flutter build apk
      - name: Debug - List APK Directory
        run: |
          cd proximity_client/build/app/outputs/flutter-apk/
          ls -la
  # Construire un fichier APK de l'application. 
  # Un APK (Android Package) est le format de fichier utilisé pour distribuer et installer des applications sur 
  # les appareils Android. Cette commande compile le code source Dart en un fichier exécutable Android.

  # Job 6: Deploy Android APK
  deploy_android:
    name: Deploy Android APK
    needs: build_android
    runs-on: ubuntu-latest
    steps:
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: app-release
          path: proximity_client/build/app/outputs/flutter-apk/app-release.apk

    
# Job de backend
  # backend:
  #   name: Build and Deploy Backend
  #   needs: deploy_android  # Ce job dépend du déploiement de l'APK Android
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
    
  #   - name: Install Node.js
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: '14'

  #   - name: Install dependencies
  #     run: npm install

  #   - name: Run backend tests
  #     run: npm test

  #   - name: Generate coverage report
  #     run: npm run coverage

  #   - name: Deploy to Heroku
  #     env:
  #       HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
  #     run: |
  #       heroku apps:login
  #       heroku git:remote -a ${{ secrets.HEROKU_APP_NAME }}
  #       git push heroku main


  # Job 7: Deploy to Heroku
  deploy_to_heroku:
    name: Deploy to Heroku
    needs: [deploy_android]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
      
      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cd proximity_backend  
          heroku apps:login
          heroku create ${{ secrets.HEROKU_APP_NAME }}
          git push heroku main
